// Disable warnings generated by the Bullet codebase
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wsign-conversion"
#pragma clang diagnostic ignored "-Wold-style-cast"
#pragma clang diagnostic ignored "-Wdouble-promotion"
#pragma clang diagnostic ignored "-Wimplicit-float-conversion"
#pragma clang diagnostic ignored "-Wcast-align"
#endif

#include <loco/backends/bullet/simulation_impl_bullet.hpp>

#include <stdexcept>

namespace loco {
namespace bullet {

SimulationImplBullet::SimulationImplBullet(core::Scenario::ptr scenario)
    : SimulationImpl(std::move(scenario)) {
    // Implement any required initial setup for the bullet backend
}

auto SimulationImplBullet::Init() -> void {
    // clang-format off
    m_CollisionConfig =
        std::make_unique<btDefaultCollisionConfiguration>();
    m_CollisionDispatcher =
        std::make_unique<btCollisionDispatcher>(m_CollisionConfig.get());
    m_Broadphase =
        std::make_unique<btDbvtBroadphase>();
    m_ConstraintSolver =
        std::make_unique<btSequentialImpulseConstraintSolver>();
    m_World =
        std::make_unique<btDiscreteDynamicsWorld>(m_CollisionDispatcher.get(),
                                                  m_Broadphase.get(),
                                                  m_ConstraintSolver.get(),
                                                  m_CollisionConfig.get());
    // clang-format on
}

auto SimulationImplBullet::Reset() -> void {
    // Reset the internal adapters for bodies, articulated systems, etc.
}

auto SimulationImplBullet::Step(Scalar step) -> void {
    if (m_World != nullptr) {
        m_World->stepSimulation(step, static_cast<int>(m_MaxSubSteps),
                                m_FixedTimeStep);
    }
}

auto SimulationImplBullet::SetTimeStep(Scalar step) -> void {
    // Save the step as the internal sub-step size
    m_FixedTimeStep = step;
}

auto SimulationImplBullet::SetGravity(const Vec3& gravity) -> void {
    // NOTE(wilbert): When changing gravity, the value is set internally for
    // each bullet rigid body that is not static. Should hint the user that this
    // function will have the expected result if the body creation step is done
    // prior to the call to the function.
    if (m_World != nullptr) {
        m_World->setGravity(vec3_to_bt(gravity));
    }
}

auto SimulationImplBullet::bullet_world() -> btDynamicsWorld& {
    if (m_World == nullptr) {
        throw std::runtime_error(
            "SimulationImplBullet::bullet_world >>> Must initialize the "
            "backend first before accessing the internal btDynamicsWorld");
    }
    return *m_World;
}

auto SimulationImplBullet::bullet_world() const -> const btDynamicsWorld& {
    if (m_World == nullptr) {
        throw std::runtime_error(
            "SimulationImplBullet::bullet_world >>> Must initialize the "
            "backend first before accessing the internal btDynamicsWorld");
    }
    return *m_World;
}

}  // namespace bullet
}  // namespace loco

#if defined(__clang__)
#pragma clang diagnostic pop  // NOLINT
#endif
